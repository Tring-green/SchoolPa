Index: schoolpa/src/main/java/com/example/schoolpa/fragment/OfficialDocumentFragment.java
===================================================================
--- schoolpa/src/main/java/com/example/schoolpa/fragment/OfficialDocumentFragment.java	(nonexistent)
+++ schoolpa/src/main/java/com/example/schoolpa/fragment/OfficialDocumentFragment.java	(revision 12)
@@ -0,0 +1,170 @@
+package com.example.schoolpa.Fragment;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.widget.SwipeRefreshLayout;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.example.schoolpa.Adapter.OfficialDocumentAdapter;
+import com.example.schoolpa.Fragment.dummy.DummyContent;
+import com.example.schoolpa.Fragment.dummy.DummyContent.DummyItem;
+import com.example.schoolpa.R;
+
+/**
+ * A fragment representing a list of Items.
+ * <p/>
+ * Activities containing this fragment MUST implement the {@link OnListFragmentInteractionListener}
+ * interface.
+ */
+public class OfficialDocumentFragment extends Fragment {
+
+    // TODO: Customize parameter argument names
+    private static final String ARG_COLUMN_COUNT = "column-count";
+    // TODO: Customize parameters
+    private int mColumnCount = 1;
+    private OnListFragmentInteractionListener mListener;
+
+    private SwipeRefreshLayout srl;
+    private RecyclerView rv_list;
+    private int lastVisibleItemPosition;
+
+    /**
+     * Mandatory empty constructor for the fragment manager to instantiate the
+     * fragment (e.g. upon screen orientation changes).
+     */
+    public OfficialDocumentFragment() {
+    }
+
+    // TODO: Customize parameter initialization
+    @SuppressWarnings("unused")
+    public static OfficialDocumentFragment newInstance(int columnCount) {
+        OfficialDocumentFragment fragment = new OfficialDocumentFragment();
+        Bundle args = new Bundle();
+        args.putInt(ARG_COLUMN_COUNT, columnCount);
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getArguments() != null) {
+            mColumnCount = getArguments().getInt(ARG_COLUMN_COUNT);
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragment_official_document_item_list, container,
+                false);
+        srl = (SwipeRefreshLayout) view.findViewById(R.id.srl);
+        rv_list = (RecyclerView) view.findViewById(R.id.rv_list);
+        final OfficialDocumentAdapter adapter = new OfficialDocumentAdapter(getActivity(),
+                DummyContent
+                        .ITEMS,
+                mListener, view);
+        rv_list.setAdapter(adapter);
+
+        srl.setColorSchemeColors(new int[]{Color.GRAY});
+        //        srl.setColorSchemeColors(new int[]{android.R.color.holo_blue_bright, android.R
+        // .color
+        //                .holo_green_light,
+        //                android.R.color.holo_orange_light, android.R.color.holo_red_light});
+        srl.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
+            @Override
+            public void onRefresh() {
+                adapter.addMore();
+                adapter.notifyDataSetChanged();
+
+                srl.setRefreshing(false);
+            }
+        });
+
+        final LinearLayoutManager layoutManager = (LinearLayoutManager) rv_list.getLayoutManager();
+        //
+        //        adapter.setOnLoadMoreListener(new OfficialDocumentAdapter.OnLoadMoreListener() {
+        //            @Override
+        //            public void LoadMore(int position) {
+        ////                adapter.addMore();
+        //                //                adapter.notifyDataSetChanged();
+        //                //                rv_list.scrollToPosition(position);
+        //            }
+        //        });
+        rv_list.setOnScrollListener(new RecyclerView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
+                if ((newState == RecyclerView.SCROLL_STATE_IDLE) &&
+                        (lastVisibleItemPosition + 1)
+                                == adapter.getItemCount()) {
+                    adapter.addMore();
+                    adapter.notifyDataSetChanged();
+                }
+
+            }
+
+            @Override
+            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+                super.onScrolled(recyclerView, dx, dy);
+                lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition();
+            }
+        });
+
+
+        // Set the adapter
+        //        if (view instanceof RecyclerView) {
+        //            Context context = view.getContext();
+        //            RecyclerView recyclerView = (RecyclerView) view;
+        //            if (mColumnCount <= 1) {
+        //                recyclerView.setLayoutManager(new LinearLayoutManager(context));
+        //            } else {
+        //                recyclerView.setLayoutManager(new GridLayoutManager(context,
+        // mColumnCount));
+        //            }
+        //            recyclerView.setAdapter(new OfficialDocumentAdapter(getActivity(),
+        // DummyContent.ITEMS, mListener));
+        //        }
+        return view;
+    }
+
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        if (context instanceof OnListFragmentInteractionListener) {
+            mListener = (OnListFragmentInteractionListener) context;
+        } else {
+            throw new RuntimeException(context.toString()
+                    + " must implement OnListFragmentInteractionListener");
+        }
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+        mListener = null;
+    }
+
+    /**
+     * This interface must be implemented by activities that contain this
+     * fragment to allow an interaction in this fragment to be communicated
+     * to the activity and potentially other fragments contained in that
+     * activity.
+     * <p/>
+     * See the Android Training lesson <a href=
+     * "http://developer.android.com/training/basics/fragments/communicating.html"
+     * >Communicating with Other Fragments</a> for more information.
+     */
+    public interface OnListFragmentInteractionListener {
+        // TODO: Update argument type and name
+        void onListFragmentInteraction(DummyItem item);
+    }
+
+}
